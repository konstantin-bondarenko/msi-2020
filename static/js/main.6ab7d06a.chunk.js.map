{"version":3,"sources":["Components/JokeBox/JokeBox.module.css","Components/Favorite/Favorite.module.css","Containers/MainScreen/MainScreen.module.css","App.module.css","Components/JokeBox/JokeBox.js","Components/Favorite/Favorite.js","hoc/withFetching.js","Containers/MainScreen/MainScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","jokeBox","props","heart","classes","Heart","like","push","Liked","className","Container","join","onClick","getLike","Content","Icon","ContainerJoke","Link","href","url","id","Joke","joke","Update","time","favorite","Favorite","deleteHandler","FavoriteContent","FavoriteJoke","FJoke","withFetching","Component","state","data","deleted","favorites","getJokeHandler","getFetch","setState","map","item","splice","indexOf","getLikeHandler","pop","this","fetch","then","response","json","result","getJoke","MainScreen","Main","Screen","Buttons","Btn","date","Math","floor","Date","now","updated_at","getTime","value","JokeBox","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ab7d06a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"JokeBox_Container__2k_2k\",\"Heart\":\"JokeBox_Heart__1dv1n\",\"Liked\":\"JokeBox_Liked__3pErB\",\"Icon\":\"JokeBox_Icon__3ZsvK\",\"Content\":\"JokeBox_Content__3Vgi3\",\"ContainerJoke\":\"JokeBox_ContainerJoke__1bhT3\",\"Joke\":\"JokeBox_Joke__3E5bj\",\"Link\":\"JokeBox_Link__bfiJX\",\"Update\":\"JokeBox_Update__3KIHa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Favorite\":\"Favorite_Favorite__15PcQ\",\"FavoriteContent\":\"Favorite_FavoriteContent__3wPft\",\"FavoriteJoke\":\"Favorite_FavoriteJoke__mxfMC\",\"FJoke\":\"Favorite_FJoke__1PkY-\",\"Heart\":\"Favorite_Heart__3oXQr\",\"Icon\":\"Favorite_Icon__2_0rN\",\"Link\":\"Favorite_Link__1QWTM\",\"Update\":\"Favorite_Update__2RBNi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"MainScreen_Main__14pCk\",\"Screen\":\"MainScreen_Screen__1Tsj6\",\"Btn\":\"MainScreen_Btn__3bVbG\",\"Buttons\":\"MainScreen_Buttons__1oElP\",\"Favorite\":\"MainScreen_Favorite__dYuwu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","import React from 'react';\n\nimport classes from './JokeBox.module.css';\n\nconst jokeBox = (props) =>{\n    const heart = [classes.Heart]\n    if(props.like){\n        heart.push(classes.Liked)\n    }\n    return (\n        <div className={classes.Container}>\n            <div className={heart.join(' ')} onClick={props.getLike}></div>\n            <div className={classes.Content}>\n                <div className={classes.Icon}></div>\n                <div className={classes.ContainerJoke}>\n                    <div className={classes.Link}>ID: <a href={props.url}>{props.id}</a></div>\n                    <div className={classes.Joke}>{props.joke}</div>\n                    <div className={classes.Update}>\n                    <p>Last update: {props.time} hours ago</p>\n                    </div>\n                </div>\n            </div>\n      </div>\n    )\n}\n\nexport default jokeBox;\n","import React from 'react';\n\nimport classes from '../Favorite/Favorite.module.css';\n\nconst favorite = (props) => {\n    const id = props.id\n    return (\n        <div className={classes.Favorite}>\n            <div className={classes.Heart} onClick={()=>props.deleteHandler(id)}></div>\n            <div className={classes.FavoriteContent}>\n                <div className={classes.Icon}></div>\n                <div className={classes.FavoriteJoke}>\n                    <div className={classes.Link}>ID: <a href={props.url}>{props.id}</a></div>\n                    <div className={classes.FJoke}>{props.joke}</div>\n                    <div className={classes.Update}>\n                    <p>Last update: {props.time} hours ago</p>\n                    </div>\n                </div>\n            </div>\n      </div>\n        )\n}\n\nexport default favorite;","import React from 'react';\n\nconst withFetching = (url) => (Component) => \n    class WithFetching extends Component {\n        state = {\n            data: [],\n            like: false,\n            deleted: false,\n            favorites: []\n        }\n\n        componentDidMount() {\n            this.getFetch()\n        }\n\n        getJokeHandler = () => {\n            this.getFetch()\n            this.setState({like: false})\n        }\n        deleteHandler = (id) => {\n            this.state.favorites.map(item=>{\n                if(item.id === id){\n                    this.setState({deleted: !this.state.deleted})\n                    return this.state.favorites.splice(this.state.favorites.indexOf(item),1)\n                }})\n        }\n        getLikeHandler = () => {\n            this.setState({like: !this.state.like})\n            if(!this.state.like){\n                this.state.favorites.push(...this.state.data)\n            }else{\n                this.state.favorites.pop() \n            }\n        }\n        getFetch(){\n            fetch(url)\n            .then(response => response.json())\n            .then(result => {\n                this.setState({\n                data: [{...result}]\n                \n                })\n            }\n            )\n        }\n        render() {\n            return <Component \n                {...this.props}\n                {...this.state} \n                getJoke={this.getJokeHandler} \n                getLike={this.getLikeHandler} \n                deleteHandler={this.deleteHandler} />\n        }\n    }\n\nexport default withFetching;","import React, { Component } from 'react';\n\nimport JokeBox from '../../Components/JokeBox/JokeBox';\nimport Favorite from '../../Components/Favorite/Favorite';\nimport withFetching from '../../hoc/withFetching';\nimport classes from './MainScreen.module.css';\n\nconst URL = 'https://api.chucknorris.io/jokes/random';\n\nclass MainScreen extends Component {\n    render(){\n        return(\n            <div className={classes.Main}>\n                <div className={classes.Screen}>\n                    <h1>Hey!</h1>\n                    <h3>Let's try to find a joke for you:</h3>\n                    <div className={classes.Buttons}>\n                        <button className={classes.Btn} onClick={this.props.getJoke}>Get Chuck Joke</button>\n                    </div>\n                    {this.props.data.map(item => {\n                        const date = Math.floor((((Date.now() - new Date(item.updated_at).getTime())/1000)/60)/60)\n                        const {id, url, value} = item;\n                        return (\n                        <JokeBox \n                            key={id}\n                            getLike={this.props.getLike}\n                            like={this.props.like}\n                            id={id}\n                            url={url}\n                            joke={value}\n                            time={date} />\n                            )\n                        })\n                    }\n                </div>\n                <div className={classes.Favorite}>\n                    <h1>Favourite</h1>\n                    {this.props.favorites.map(item => {\n                        const date = Math.floor((((Date.now() - new Date(item.updated_at).getTime())/1000)/60)/60)\n                        const {id, url, value} = item;\n                        return (\n                        <Favorite \n                            key={id}\n                            deleted={this.props.deleted}\n                            id={id}\n                            url={url}\n                            joke={value}\n                            time={date}\n                            deleteHandler={this.props.deleteHandler} />\n                            )\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withFetching(URL)(MainScreen);","import React, { Component } from 'react';\n\nimport MainScreen from './Containers/MainScreen/MainScreen';\nimport classes from './App.module.css';\n\nclass App extends Component {\n  render(){\n    return (\n      <div className={classes.App}>\n        <MainScreen />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}